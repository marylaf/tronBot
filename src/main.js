import { Telegraf, session } from "telegraf";
import { config } from "dotenv";
import { Postgres } from "@telegraf/session/pg";
import {
  inlineMenuArray,
  inlineWalletArray,
  inlineHistoryArray,
} from "./constants.js";
import { addNewWallet } from './db.js';

config();

const store = Postgres({
  user: process.env.POSTGRESQL_USER,
  host: process.env.POSTGRESQL_HOST,
  database: process.env.POSTGRESQL_DBNAME,
  password: process.env.POSTGRESQL_PASSWORD,
  port: process.env.POSTGRESQL_PORT,
});

const bot = new Telegraf(process.env.TELEGRAM_TOKEN, {
  handlerTimeout: Infinity,
});

bot.use(session({ store, defaultSession: () => ({ count: 0 }) }));

// fun—Åtion for opening start menu
const handleStartMenu = (ctx) => {
  const startTextMessage = `–í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏:`;
  const startCaptchaMessage = {
    reply_markup: {
      inline_keyboard: inlineMenuArray,
    },
  };

  ctx.reply(startTextMessage, startCaptchaMessage);
};

// function for opening wallet's menu
const handleWalletMenu = (ctx) => {
  const startTextMessage = `–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å —Å –∫–æ—à–µ–ª—å–∫–∞–º–∏?`;
  const startCaptchaMessage = {
    reply_markup: {
      inline_keyboard: inlineWalletArray,
    },
  };

  ctx.reply(startTextMessage, startCaptchaMessage);
};

const handleHistoryMenu = (ctx) => {
  const startTextMessage = `–°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å?`;
  const startCaptchaMessage = {
    reply_markup: {
      inline_keyboard: inlineHistoryArray,
    },
  };

  ctx.reply(startTextMessage, startCaptchaMessage);
};

bot.start((ctx) => handleStartMenu(ctx));
bot.command("menu", (ctx) => {
  ctx.session.awaitingWalletAddress = false;
  handleStartMenu(ctx);
})

// command for menu array
bot.on("callback_query", async (ctx) => {
  try {
    const ctxData = ctx.update.callback_query.data;
    const textWalletsMessage = "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ USDT –∫–æ—à–µ–ª—å–∫–∞ üí∏";
    switch (ctxData) {
      //inline keyboard menu
      case "wallets":
        handleWalletMenu(ctx);
        break;

      case "history":
        handleHistoryMenu(ctx);
        break;

      case "transactions":
        console.log("–ß–µ—Ç—ã—Ä–µ");
        break;

      //inline keyboard wallets
      case "addNew":
        ctx.reply(textWalletsMessage);
        ctx.session.awaitingWalletAddress = true;
        break;

      case "allWallets":
        break;

      case "return":
        handleStartMenu(ctx);
        break;
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞: ${error.message}`, error);
  }
});

function isValidWalletAddress(address) {
  if (typeof address !== 'string') {
    return false;
  }
  const re = /^T[a-zA-Z0-9]{33}$/;
  return re.test(address);
}

bot.on("message", async (ctx) => {
  if (ctx.session.awaitingWalletAddress) {
    const walletAddress = ctx.update.message.text;
    const username = ctx.update.message.from.username;
    const userId = ctx.update.message.from.id;

    if (isValidWalletAddress(walletAddress)) {
      try {
        await addNewWallet( userId, username, walletAddress);
        await ctx.reply("–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω :)");
        ctx.session.awaitingWalletAddress = false;
      } catch (error) {
        await ctx.reply(error.message);
      }
    } else {
      await ctx.reply("–ê–¥—Ä–µ—Å –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑");
    }
  } else {
    await ctx.reply("–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é. –Ø –Ω–µ –æ—Ç–≤–µ—á–∞—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ ü¶æü§ñ");
  }
});

bot.launch();